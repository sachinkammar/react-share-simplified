{"version":3,"sources":["social-share/SocialShare.js","App.js","serviceWorker.js","index.js"],"names":["SocialShare","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this$props","url","title","facebook","googlePlus","twitter","whatsapp","email","addClass","Previewemail","_ref","facebookClass","twitterClass","googlePlusClass","whatsappClass","emailClass","console","log","iconSize","undefined","react_default","a","createElement","className","FacebookShareButton","quote","style","outline","FacebookIcon","size","round","GooglePlusShareButton","GooglePlusIcon","TwitterShareButton","TwitterIcon","WhatsappShareButton","WhatsappIcon","EmailShareButton","EmailIcon","Component","App","marginTop","src_social_share_SocialShare","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.813ac625.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  FacebookShareButton,\r\n  GooglePlusShareButton,\r\n  TwitterShareButton,\r\n  WhatsappShareButton,\r\n  EmailShareButton,\r\n  FacebookIcon,\r\n  TwitterIcon,\r\n  GooglePlusIcon,\r\n  EmailIcon,\r\n  WhatsappIcon\r\n} from \"react-share\";\r\nimport './SocialShare.css';\r\n\r\nclass SocialShare extends Component {\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n  render() {\r\n    const {url,title,facebook,googlePlus,twitter,whatsapp,email,addClass,Previewemail} = this.props;\r\n    let {facebookClass,twitterClass,googlePlusClass,whatsappClass,emailClass} = this.props || \"shareIcon\";\r\n    console.log(\"iconsize\",this.props.iconSize);\r\n    let iconSize = 32;\r\n    if(this.props.iconSize!==undefined){\r\n        iconSize = this.props.iconSize\r\n    }\r\n    return (\r\n      <span className={addClass}>\r\n        {facebook && (<FacebookShareButton url={url} quote={title} style={{outline:'none'}} className={facebookClass}>\r\n          <FacebookIcon\r\n            size={iconSize}\r\n            round />\r\n        </FacebookShareButton>)}\r\n        \r\n        {googlePlus && (<GooglePlusShareButton url={url} quote={title} style={{outline:'none'}} className={googlePlusClass}>\r\n          <GooglePlusIcon\r\n            size={iconSize}\r\n            round />\r\n        </GooglePlusShareButton>)}\r\n        \r\n        {twitter && (<TwitterShareButton url={url} quote={title} style={{outline:'none'}}  className={twitterClass}>\r\n          <TwitterIcon\r\n            size={iconSize}\r\n            round />\r\n        </TwitterShareButton>)}\r\n        \r\n        {whatsapp && (<WhatsappShareButton url={url} quote={title} style={{outline:'none'}} className={whatsappClass}>\r\n          <WhatsappIcon\r\n            size={iconSize}\r\n            round />\r\n        </WhatsappShareButton>)}\r\n        \r\n        {email && (<EmailShareButton url={url} quote={title} style={{outline:'none'}} className={emailClass}>\r\n          <EmailIcon\r\n            size={iconSize}\r\n            round />\r\n        </EmailShareButton>)}\r\n        {Previewemail && (<EmailShareButton url={url} quote={title} style={{outline:'none'}} className={emailClass}>\r\n          <EmailIcon\r\n            size={iconSize}\r\n            round />\r\n        </EmailShareButton>)}\r\n      </span>\r\n    );\r\n  }\r\n}\r\nexport default SocialShare;","import React, { Component } from 'react';\nimport './App.css';\nimport SocialShare from './social-share/SocialShare'\nclass App extends Component {\n  render() {\n    const url = \"https://www.github.com\";\n    const title = \"React share simplified\";\n    return (\n      <div className=\"App\">\n        <div className=\"align-inline\" style={{marginTop:'10px'}}>\n          <span className=\"share-title\">Share: </span>\n          <SocialShare\n            url={url}\n            title={title}\n            facebook={true}\n            facebookClass=\"iconStyle\"\n            googlePlus={true}\n            googlePlusClass=\"iconStyle\"\n            twitter={true}\n            twitterClass=\"iconStyle\"\n            email={true}\n            emailClass=\"iconStyle\"\n            whatsapp={true}\n            whatsappClass=\"iconStyle\"\n            iconSize={32}\n            addClass=\"align-inline\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}